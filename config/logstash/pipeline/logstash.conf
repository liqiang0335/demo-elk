input {
  beats {
    port => 5044
  }
}

filter {
  # 第一步：删除前缀，只保留JSON部分
  mutate {
    gsub => [
      "message", "^\[[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\] /[^:]+:\d+ - ", ""
    ]
  }
  
  # 第二步：解析JSON
  json {
    source => "message"
    target => "doc"
  }
  
  # 第三步：将所有字段移到根级别
  if [doc] {
    mutate {
      rename => {
        "[doc][header]" => "header"
        "[doc][device]" => "device"
        "[doc][payload]" => "payload"
      }
    }
    
    # 提取常用字段到根级别方便查询
    mutate {
      add_field => {
        "msgId" => "%{[header][msgId]}"
        "msgType" => "%{[header][msgType]}"
        "subType" => "%{[header][subType]}"
        "gatewaySn" => "%{[device][gatewaySn]}"
        "dataType" => "%{[payload][dataType]}"
        "sn" => "%{[payload][sn]}"
        "bat" => "%{[payload][bat]}"
      }
    }
    
    # 转换数据类型
    mutate {
      convert => {
        "msgId" => "float"
        "bat" => "integer"
      }
    }
  }
  
  # 第四步：从msgId设置时间戳
  ruby {
    code => '
      msg_id = event.get("msgId")
      if msg_id
        # msgId是毫秒时间戳
        event.set("@timestamp", Time.at(msg_id.to_f / 1000.0))
      end
    '
  }
  
  # 第五步：清理字段
  mutate {
    remove_field => ["message", "doc", "host", "agent", "@version"]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "iot-logs-%{+YYYY.MM.dd}"
    document_id => "%{msgId}"
  }
  
  # 调试输出
  stdout {
    codec => rubydebug
  }
}
