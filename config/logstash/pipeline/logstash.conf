input {
  beats {
    port => 5044
  }
}

filter {
  # 只处理来自 raw_data 的日志
  if [log_type] == "raw_data" {
    
    # 调试: 输出原始消息
    mutate {
      add_field => { "debug_original_message" => "%{[message]}" }
    }
    
    # 解析日志行的基本结构: [timestamp] ip - json_data
    grok {
      match => { 
        "message" => "^\[%{DATA:log_timestamp}\] %{IPORHOST:client_ip}:%{INT:client_port} - %{GREEDYDATA:raw_json}" 
      }
      tag_on_failure => ["_grokparsefailure"]
    }
    
    # 解析时间戳
    if "_grokparsefailure" not in [tags] {
      date {
        match => [ "log_timestamp", "yyyy-MM-dd HH:mm:ss" ]
        target => "@timestamp"
      }
    }
    
    # 解析 JSON 数据
    if [raw_json] {
      json {
        source => "raw_json"
        target => "parsed_data"
        skip_on_invalid_json => true
      }
    }
    
    # 过滤掉 heartbeat 消息
    if [parsed_data][heartbeat] {
      drop {}
    }
    
    # 处理有效的数据消息
    if [parsed_data][header] {
      
      # 提取基本信息
      mutate {
        add_field => {
          "msg_id" => "%{[parsed_data][header][msgId]}"
          "msg_type" => "%{[parsed_data][header][msgType]}"
          "sub_type" => "%{[parsed_data][header][subType]}"
          "gateway_sn" => "%{[parsed_data][device][gatewaySn]}"
          "data_type" => "%{[parsed_data][payload][dataType]}"
        }
      }
      
      # 提取设备序列号和电池信息
      if [parsed_data][payload][sn] {
        mutate {
          add_field => { "device_sn" => "%{[parsed_data][payload][sn]}" }
        }
      }
      
      if [parsed_data][payload][bat] {
        mutate {
          add_field => { "battery_level" => "%{[parsed_data][payload][bat]}" }
          convert => { "battery_level" => "integer" }
        }
      }
    }
    
    # 清理不需要的字段
    mutate {
      remove_field => [ "parsed_data", "raw_json" ]
    }
    
    # 添加处理时间戳
    mutate {
      add_field => { "processed_at" => "%{@timestamp}" }
    }
  }
}

output {
  # 输出到 Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "iot-logs-%{+YYYY.MM.dd}"
  }
  
  # 输出到控制台用于调试
  stdout {
    codec => rubydebug
  }
}
